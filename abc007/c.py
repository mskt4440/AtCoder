#
# abc007 c
#
import sys
from io import StringIO
import unittest
from collections import deque


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例1(self):
        input = """7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########"""
        output = """11"""
        self.assertIO(input, output)

    def test_入力例2(self):
        input = """5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########"""
        output = """10"""
        self.assertIO(input, output)

    def test_入力例3(self):
        input = """50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################"""
        output = """94"""
        self.assertIO(input, output)


def resolve():
    R, C = map(int, input().split())
    sy, sx = map(int, input().split())
    gy, gx = map(int, input().split())
    c = [list(input()) for _ in range(R)]

    F = [[-1]*C for _ in range(R)]

    dx = [1, 0, -1, 0]
    dy = [0, 1, 0, -1]

    Q = deque()
    Q.append([sx-1, sy-1])
    F[sy-1][sx-1] = 0

    while Q:
        p = Q.popleft()
        x, y = p

        if x == gx-1 and y == gy-1:
            break

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if nx < 0 or nx >= C or ny < 0 or ny >= R or c[ny][nx] == "#" or F[ny][nx] != -1:
                continue

            Q.append([nx, ny])
            F[ny][nx] = F[y][x] + 1

    print(F[gy-1][gx-1])


if __name__ == "__main__":
    unittest.main()
    # resolve()
